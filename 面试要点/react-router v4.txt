React Router 的早期版本将路由规则集中在一个位置，使它们与布局组件分离。当然，路由可
以被划分成多个文件，但从概念上讲，路由是一个单元，基本上是一个美化的配置文件。

以下是 v3 中的一些核心思想，但在 v4 中是不正确的:

路由集中在一个地方。
布局和页面嵌套是通过 <Route> 组件的嵌套而来的。
布局和页面组件是完全纯粹的，它们是路由的一部分。

对于使用 React Router v4 构建的应用程序，首先看到的是“路由”似乎丢失了。在 v3 中，路由
是我们的应用程序直接呈现给 DOM 的最巨大的东西。 现在，除了 <BrowserRouter> 外，我们首先
抛给 DOM 的是我们的应用程序本身。


另一个在 v3 的例子中有而在 v4 中没有的是，使用 {props.children} 来嵌套组件。
这是因为在 v4 中，<Route> 组件在何处编写，如果路由匹配，子组件将在那里渲染。


包容性路由
在前面的例子中，你可能已经注意到了 exact 这个属性。那么它是什么呢？V3 的路由规则是“排他性”
的，这意味着只有一条路由将获胜。V4 的路由默认为“包含”的，这意味着多个 <Route> 可以同时
进行匹配和渲染。

排他性路由
如果你只需要在路由列表里匹配一个路由，则使用 <Switch> 来启用排他路由：在给定的 <Switch>
路由中只有一条将渲染。在 HomePage 路由上，我们仍然需要 exact 属性，尽管我们会先把它列出来

“默认路由”和“未找到”

尽管在 v4 中已经没有 <IndexRoute> 了，但可以使用 <Route exact> 
来达到同样的效果。如果没有路由解析，则可以使用 <Switch> 与 <Redirect> 重定向到具有有效路径
的默认页面
（如同我对本示例中的 HomePage 所做的），甚至可以是一个“未找到页面”。

