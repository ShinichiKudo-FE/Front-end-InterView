redux-saga常用方法解释

Effect 是一个 javascript 对象，可以通过 yield 传达给 sagaMiddleware 进行执行在，
 如果我们应用redux-saga，所有的 Effect 都必须被 yield 才会执行。


* take
等待 dispatch 匹配某个 action

* put
触发某个action， 作用和dispatch相同

* select
作用和 redux thunk 中的 getState 相同。通常会与reselect库配合使用

* 阻塞调用和无阻塞调用 call \ fork
redux-saga 可以用 fork 和 call 来调用子 saga ，其中 fork 是无阻塞型调用，call 是阻塞型调用。
call 有阻塞地调用 saga 或者返回 promise 的函数，只在触发某个动作

* fork 和 cancel
通常fork 和 cancel配合使用， 实现非阻塞任务，take是阻塞状态，也就是实现执行take时候，
无法向下继续执行，fork是非阻塞的，同样可以使用cancel取消一个fork 任务

* takeEvery
循环监听某个触发动作，我们通常会使用while循环替代

* takeLatest
对于触发多个action的时候，只执行最后一个，其他的会自动取消

Redux-Saga优点
以用同步的方式写异步代码，可以做一些async 函数做不到的事情 (无阻塞并发、取消请求)
可以通过监听Action 来进行前端的打点日志记录，减少侵入式打点对代码的侵入程度

带来的问题
异步请求相关的问题较难调试排查